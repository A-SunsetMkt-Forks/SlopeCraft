name: Build dev version artifacts
on: 
  pull_request:
  push:
    branches:
      #- main
      #- dev
      - update-sc-ui

jobs:

  windows-build:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Debug, Release]
        gpu_api: [None]
        vectorize: [true, false]
        exclude:
          - gpu_api: OpenCL
            vectorize: false
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      GPU_API: ${{ matrix.gpu_api }}
      VECTORIZE: ${{ matrix.vectorize }}
    steps:
      - name: echo matrix variables (build_type = ${{ matrix.build_type }})
        run: | 
          echo "env:BUILD_TYPE = $env:BUILD_TYPE"
          echo "env:GPU_API = $env:GPU_API"

      - name: check clang
        run: | 
          where clang
          where clang-cl
          clang --version

        # Invoke-Expression "& 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat'"


      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get short SHA
        run: |
          echo "GITHUB_SHA = $env:GITHUB_SHA"
          $short_sha=$env:GITHUB_SHA.substring(0,7)
          echo "short_sha = $short_sha"
          echo "SHORT_SHA=$short_sha" >> $env:GITHUB_ENV

      - name: make dirs
        run: |
          mkdir bin
          mkdir bin/Qt6.5.0-msvc-shared
          mkdir 3rdParty
          mkdir bin/dependencies
          
      - name: Build and install zlib
        run: |
          $basedir=(pwd).path.replace("\\","/")
          echo "basedir = $basedir"
          $BUILD_TYPE=$env:BUILD_TYPE
          cd 3rdParty
          git clone https://github.com/madler/zlib.git
          cd zlib
          git checkout v1.2.13
          cd $basedir
          mkdir bin/build-zlib
          cmake -S 3rdParty/zlib -B bin/build-zlib -G Ninja -DCMAKE_C_COMPILER:FILEPATH=clang -DCMAKE_BUILD_TYPE="Release" -DCMAKE_INSTALL_PREFIX="$basedir/bin/dependencies"
          cmake --build bin/build-zlib --parallel
          cmake --install bin/build-zlib
      
      - name: Build and install libzip
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $BUILD_TYPE=$env:BUILD_TYPE
          cd 3rdParty
          git clone https://github.com/nih-at/libzip.git
          cd libzip
          git checkout v1.9.2
          cd $basedir
          mkdir bin/build-libzip
          cmake -S 3rdParty/libzip -B bin/build-libzip -G Ninja -DCMAKE_BUILD_TYPE="Release" -DCMAKE_C_COMPILER:FILEPATH=clang -DCMAKE_CXX_COMPILER:FILEPATH=clang++ -DCMAKE_INSTALL_PREFIX="$basedir/bin/dependencies" -DCMAKE_PREFIX_PATH="$basedir/bin/dependencies" -DBUILD_SHARED_LIBS=true -DLIBZIP_DO_INSTALL=true -DENABLE_BZIP2=false -DENABLE_LZMA=false -DENABLE_ZSTD=false
          cmake --build bin/build-libzip --parallel
          cmake --install bin/build-libzip

      - name: Build and install libpng
        run: |
          $basedir=(pwd).path.replace("\\","/")
          $BUILD_TYPE=$env:BUILD_TYPE
          cd 3rdParty
          git clone https://github.com/glennrp/libpng.git
          cd libpng
          git checkout v1.6.39
          cd $basedir
          mkdir bin/build-libpng
          cmake -S 3rdParty/libpng -B bin/build-libpng -G Ninja -DCMAKE_BUILD_TYPE="Release" -DCMAKE_C_COMPILER:FILEPATH=clang -DCMAKE_INSTALL_PREFIX="$basedir/bin/dependencies" -DCMAKE_PREFIX_PATH="$basedir/bin/dependencies" -DPNG_SHARED:BOOL=true -DPNG_STATIC:BOOL=false
          cmake --build bin/build-libpng --parallel
          cmake --install bin/build-libpng
            
      - name: Download Qt6.5.0-msvc-shared and extract
        run: |
          cmd
          curl -JL -o bin/Qt6.5.0-msvc-shared.7z "https://github.com/SlopeCraft/VisualCraft-binaries/releases/download/win-binaries/Qt6.5.0-msvc-shared.7z"
          7z x -o"bin/Qt6.5.0-msvc-shared" bin/Qt6.5.0-msvc-shared.7z
          exit
          tree /f bin/Qt6.5.0-msvc-shared
        # Qt installation dir: bin/Qt6.5.0-msvc-shared
          
      - name: CMake configure
        shell: cmd
        run: |
          mkdir build
          mkdir install
          set PATH=C:\Program Files\PowerShell\7;C:\vcpkg;C:\Program Files (x86)\NSIS\;C:\Program Files\dotnet;C:\Program Files (x86)\GitHub CLI;C:\Program Files\Git\bin;C:\Program Files\OpenSSL\bin;C:\Program Files (x86)\Microsoft SDKs\Azure\CLI2\wbin;C:\Program Files\Microsoft\jdk-11.0.16.101-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\PowerShell\7\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\CMake\bin;C:\Program Files\Microsoft SDKs\Service Fabric\Tools\ServiceFabricLocalClusterManager;C:\Program Files\Git\cmd;C:\Program Files\GitHub CLI\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\LLVM\bin;C:\Users\runneradmin\.dotnet\tools;C:\Users\runneradmin\.cargo\bin;C:\Users\runneradmin\AppData\Local\Microsoft\WindowsApps
          "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" & cmake -S . -B ./build -G Ninja -DCMAKE_C_COMPILER:FILEPATH=clang-cl -DCMAKE_CXX_COMPILER:FILEPATH=clang-cl -DCMAKE_PREFIX_PATH:PATH=./bin/Qt6.5.0-msvc-shared;./bin/dependencies -DCMAKE_INSTALL_PREFIX:PATH=./install -DCMAKE_BUILD_TYPE="${{ matrix.build_type }}" -DSlopeCraft_GPU_API:STRING="${{ matrix.gpu_api }}" -DSlopeCraft_vectorize:BOOL="${{ matrix.vectorize }}" -DSlopeCraft_windeployqt_flags_install:STRING=--no-translation;-release

      - name: CMake build
        shell: cmd
        run: |
          tree ./build
          cmake --build ./build --parallel 10

      - name: CMake install
        shell: cmd
        run: |
          cmake --install ./build

      - name: Make zip and 7z packs with CPack
        run: |
          $basedir=(pwd).path.replace("\\","/")
          cd ./build
          cpack -G ZIP -B "$basedir/pack"
          cpack -G 7Z -B "$basedir/pack"

      - name: Upload zip pack
        uses: actions/upload-artifact@v3
        with: 
          name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-zip
          path: pack/SlopeCraft*.zip
          if-no-files-found: error 

      - name: Upload 7z pack
        uses: actions/upload-artifact@v3
        with: 
          name: SlopeCraft-dev-${{ env.SHORT_SHA }}-${{ matrix.build_type }}-${{ matrix.gpu_api }}-vec=${{ matrix.vectorize }}-windows-7z
          path: pack/SlopeCraft*.7z
          if-no-files-found: error 