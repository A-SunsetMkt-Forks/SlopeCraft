name: Build dev version artifacts
on: [pull_request, push]

jobs:

  macos-build:
    runs-on: macos-latest
    steps:
      - name: Install Ninja build system
        run: brew install ninja
      - name: Install dependencies
        run: brew install qt@6
      - name: Add /usr/local/lib to PATH
        run: echo "/usr/local/lib" >> $GITHUB_PATH
      - name: Check PATH
        run: echo $PATH
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure CMake
        run: cmake -S . -B ./build -G "Ninja" -DCMAKE_C_COMPILER=/usr/local/Cellar/gcc/12.2.0/bin/gcc-12 -DCMAKE_CXX_COMPILER=/usr/local/Cellar/gcc/12.2.0/bin/g++-12 -DCMAKE_INSTALL_PREFIX=./build/install -DSlopeCraft_GPU_API="None"
      - name: Build and Install
        run: |
          cd build
          cmake --build . --parallel
          cmake --install .
          cd install
          macdeployqt SlopeCraft.app
          chmod +x SlopeCraft.app/Contents/MacOS/SlopeCraft
          macdeployqt MapViewer.app
          chmod +x MapViewer.app/Contents/MacOS/MapViewer
          macdeployqt imageCutter.app
          chmod +x imageCutter.app/Contents/MacOS/imageCutter
          chmod +x VisualCraft.app/Contents/MacOS/VisualCraft
          chmod +x vccl.app/Contents/MacOS/vccl
      - name: Get short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: SlopeCraft-dev-${{ env.SHORT_SHA }}-macos
          path: build/install
  
  linux-build:
    runs-on: ubuntu-latest
    steps:
      - name: Make directories
        run: mkdir build install

      #- name: List installed
      #  run: apt list --installed

      - name: Install cmake, ninja
        run: sudo apt install cmake ninja-build

      - name: Install libzip, libpng, Eigen3
        run: sudo apt install libzip-dev zipcmp ziptool zipmerge libpng-dev libeigen3-dev

      - name: Install qt6
        run: sudo apt install libqt6widgets6 libqt6gui6 libqt6network6 libqt6concurrent6 qt6-base-dev qt6-tools-dev-tools qt6-tools-dev qt6-l10n-tools
      
      - name: Install additional qt-related packages
        run: sudo apt install x11-utils libxcb-xinerama0 libxv1 libgl-dev
        # Without these libs, cmake cannot find Qt6::Gui. But if you install nvidia-cuda-toolkit, they will be installed automatically
      #- name: Install OpenCL
      #  run: sudo apt install nvidia-cuda-toolkit
        #nvidia-cuda-dev ocl-icd-libopencl1 ocl-icd-opencl-dev ocl-icd-dev opencl-c-headers opencl-clhpp-headers
      #- name: List all packages
      #  run: apt list --installed

      - name: Install xz (Release as tar.xz)
        run: sudo apt install xz-utils

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: CMake configure
        run: cmake -S . -B ./build -G Ninja -DCMAKE_C_COMPILER:FILEPATH=/usr/bin/gcc-12 -DCMAKE_CXX_COMPILER:FILEPATH=/usr/bin/g++-12 -DCMAKE_INSTALL_PREFIX:PATH=./install -DSlopeCraft_GPU_API:STRING=None -DCMAKE_BUILD_TYPE:STRING=Debug
      
      - name: CMake build
        run: cmake --build ./build --parallel
      
      - name: CMake install # Uptil now, we have not get a prefect way to deploy qt shared libs. This may be finished in cmake script
        run: cmake --install ./build
      #- name: List all files
      #  run: ls -R
      - name: Get short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV
      
      - name: Compress
        run: |
          cd install
          tar -cf compress.tar ./*
          xz -9 ./compress.tar
          mv ./compress.tar.xz SlopeCraft-dev-${{ env.SHORT_SHA }}-linux.tar.xz
          cd ..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          #name: SlopeCraft-dev-${{ env.SHORT_SHA }}-linux.tar.xz
          path: install/SlopeCraft-dev-${{ env.SHORT_SHA }}-linux.tar.xz
          if-no-files-found: error