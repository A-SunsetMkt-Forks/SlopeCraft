#ifndef SCHEM_SCHEM_H
#define SCHEM_SCHEM_H

#include <string>
#include <string_view>
#include <type_traits>
#include <unsupported/Eigen/CXX11/Tensor>
#include <vector>

namespace libSchem {
// template <int64_t max_block_count = 256>

struct litematic_info {
  std::string litename_utf8{"Litematic generated by SlopeCraft."};
  std::string regionname_utf8{"Software developer : TokiNoBug."};
  std::string author_utf8{"SlopeCraft"};
  std::string destricption_utf8{"This litematic is generated by SlopeCraft."};
};

class Schem {
public:
  // using ele_t = std::conditional_t<(max_block_count > 256), uint16_t,
  // uint8_t>;
  using ele_t = uint16_t;

private:
  /// The 3 indices are stored in [x][z][y] col-major, and in minecraft the
  /// best storage is [y][z][x] row-major
  Eigen::Tensor<ele_t, 3> xzy;

  std::vector<const char *> block_id_list;

  int MC_ver_number;

  uint8_t MC_major_ver_number;

public:
  Schem() { xzy.resize(0, 0, 0); }
  Schem(int64_t x, int64_t y, int64_t z) {
    xzy.resize(x, y, z);
    xzy.setZero();
  }

  inline void resize(int64_t x, int64_t y, int64_t z) noexcept {
    if (x < 0 || y < 0 || z < 0) {
      return;
    }
    xzy.resize(x, y, z);
  }

  inline ele_t &operator()(int64_t x, int64_t y, int64_t z) noexcept {
    return xzy(x, z, y);
  }

  inline const ele_t &operator()(int64_t x, int64_t y,
                                 int64_t z) const noexcept {
    return xzy(x, z, y);
  }

  inline ele_t &operator()(int64_t idx) noexcept { return xzy(idx); }

  inline const ele_t &operator()(int64_t idx) const noexcept {
    return xzy(idx);
  }

  inline int64_t x_range() const noexcept { return xzy.dimension(0); }
  inline int64_t y_range() const noexcept { return xzy.dimension(2); }
  inline int64_t z_range() const noexcept { return xzy.dimension(1); }

  inline int block_types() const noexcept { return block_id_list.size(); }

  inline int64_t size() const noexcept { return xzy.size(); }

  int64_t non_zero_count() const noexcept;

  /// Schem don't have the ownership to these strings
  void set_block_id(const char *const *const block_ids, const int num) noexcept;

  inline int MC_version_number() const noexcept { return this->MC_ver_number; }

  inline void set_MC_version_number(const int _) noexcept {
    this->MC_ver_number = _;
  }

  inline uint8_t MC_major_version_number() const noexcept {
    return this->MC_major_ver_number;
  }

  inline void set_MC_major_version_number(const uint8_t _) noexcept {
    this->MC_major_ver_number = _;
  }

public:
  bool export_litematic(
      const std::string_view filename,
      const litematic_info &info = litematic_info()) const noexcept;
};

} // namespace libSchem

#endif // SCHEM_SCHEM_H